[gd_resource type="VisualShader" load_steps=23 format=3 uid="uid://brnomn2rnxqij"]

[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/worley2d.gd" id="1_ogcs8"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/fractal/perlin2d_fractal.gd" id="1_sq05i"]

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_53ept"]
parameter_name = "CoverColor"
default_value_enabled = true
default_value = Color(0.42, 0, 0, 1)

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_wa7jw"]
output_port_for_preview = 0
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(1, 1, 1, 1), 2, Quaternion(0.5, 0.5, 0.5, 0.5)]
op_type = 5

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_i34mo"]
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(0, 0, 0, 0)]
op_type = 2
operator = 2

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_1psay"]
constant = 0.6

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_ik8p1"]
default_input_values = [0, 0.6, 1, 1.0, 2, 0.5]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_0d3y6"]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_wmb6b"]
default_input_values = [0, Vector2(0, 0), 1, Vector2(50, 50)]
op_type = 0
operator = 2

[sub_resource type="VisualShaderNodeRemap" id="VisualShaderNodeRemap_chcvw"]
default_input_values = [1, 0.0, 2, 1.0, 3, 0.2, 4, 0.35]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_ghm6f"]
input_name = "uv"

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_4vtb4"]
default_input_values = [1, Vector3(0, 0, 0), 2, 10.0, 3, 1.0]
initialized = true
script = ExtResource("1_ogcs8")

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_ddh3w"]
function = 31

[sub_resource type="VisualShaderNodeStep" id="VisualShaderNodeStep_a0tqg"]
output_port_for_preview = 0
default_input_values = [0, 0.0, 1, 0.5]

[sub_resource type="VisualShaderNodeMix" id="VisualShaderNodeMix_qclid"]
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(1, 1, 1, 1), 2, Quaternion(0.5, 0.5, 0.5, 0.5)]
op_type = 5

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_iyo17"]
output_port_for_preview = 0
default_input_values = [1, 5, 2, Vector3(400, 10, 0), 3, 2.0, 4, 0.8, 5, 0.0, 6, 0.6, 7, Vector3(0.5, 0.5, 0)]
initialized = true
script = ExtResource("1_sq05i")

[sub_resource type="Gradient" id="Gradient_kdy7u"]
colors = PackedColorArray(0.0807834, 0.0807833, 0.0807833, 1, 0.593134, 0.593134, 0.593134, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_6s7c2"]
gradient = SubResource("Gradient_kdy7u")

[sub_resource type="VisualShaderNodeTexture" id="VisualShaderNodeTexture_xfxlk"]
output_port_for_preview = 0
texture = SubResource("GradientTexture1D_6s7c2")

[sub_resource type="VisualShaderNodeFloatFunc" id="VisualShaderNodeFloatFunc_1pcks"]
output_port_for_preview = 0
function = 31

[sub_resource type="VisualShaderNodeRemap" id="VisualShaderNodeRemap_xcvyj"]
default_input_values = [1, 0.0, 2, 1.0, 3, 0.05, 4, 0.2]

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_r6f7o"]
output_port_for_preview = 0
operator = 2

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx;

uniform vec4 CoverColor : source_color = vec4(0.420000, 0.000000, 0.000000, 1.000000);
uniform sampler2D tex_frg_6;


// WorleyNoise2D
vec2 _cellular2dNoiseFunc(vec2 P, float _jitter_w2d) {
	float K = 0.142857142857; // 1/7
	float Ko = 0.428571428571; // 3/7
	
	vec2 Pi = floor(P) - floor(floor(P) * (1.0 / 289.0)) * 289.0;
	vec2 Pf = fract(P);
	vec3 oi = vec3(-1.0, 0.0, 1.0);
	vec3 of = vec3(-0.5, 0.5, 1.5);
	vec3 px = (34.0*(Pi.x+oi)+1.0)*(Pi.x+oi)-floor((34.0*(Pi.x+oi)+1.0)*(Pi.x+oi)*(1.0/289.0))* 289.0;
	vec3 p = (34.0*(px.x+Pi.y+ oi)+1.0)*(px.x+Pi.y+ oi)-floor((34.0*(px.x+Pi.y+oi)+1.0)*(px.x+Pi.y+ oi)*(1.0/289.0))*289.0;
	vec3 ox = fract(p*K) - Ko;
	vec3 oy = (floor(p*K) - floor(floor(p*K) * (1.0 / 7.0)) * 7.0) * K - Ko;
	vec3 dx = Pf.x + 0.5 + _jitter_w2d*ox;
	vec3 dy = Pf.y - of + _jitter_w2d*oy;
	vec3 d1 = dx * dx + dy * dy;
	p = (34.0*(px.y+Pi.y+oi)+1.0)*(px.y+Pi.y+oi)-floor((34.0*(px.y+Pi.y+oi)+1.0)*(px.y+Pi.y+oi)*(1.0/289.0))*289.0;
	ox = fract(p*K) - Ko;
	oy = (floor(p*K) - floor(floor(p*K) * (1.0 / 7.0)) * 7.0) * K - Ko;
	dx = Pf.x - 0.5 + _jitter_w2d*ox;
	dy = Pf.y - of + _jitter_w2d*oy;
	vec3 d2 = dx * dx + dy * dy;
	p = (34.0*(px.z+Pi.y+oi)+1.0)*(px.z+Pi.y+oi)-floor((34.0*(px.z+Pi.y+oi)+1.0)*(px.z+Pi.y+oi)*(1.0/289.0))*289.0;
	ox = fract(p*K) - Ko;
	oy = (floor(p*K) - floor(floor(p*K) * (1.0 / 7.0)) * 7.0) * K - Ko;
	dx = Pf.x - 1.5 + _jitter_w2d*ox;
	dy = Pf.y - of + _jitter_w2d*oy;
	vec3 d3 = dx * dx + dy * dy;
	vec3 d1a = min(d1, d2);
	d2 = max(d1, d2);
	d2 = min(d2, d3);
	d1 = min(d1a, d2);
	d2 = max(d1a, d2);
	d1.xy = (d1.x < d1.y) ? d1.xy : d1.yx;
	d1.xz = (d1.x < d1.z) ? d1.xz : d1.zx;
	d1.yz = min(d1.yz, d2.yz);
	d1.y = min(d1.y, d1.z);
	d1.y = min(d1.y, d2.x);
	return sqrt(d1.xy);
}
// FractalPerlinNoise2D
float _perlin2dNoiseFuncFractal(vec2 P) {
	vec4 Pi = floor(vec4(P, P)) + vec4(0.0, 0.0, 1.0, 1.0);
	vec4 Pf = fract(vec4(P, P)) - vec4(0.0, 0.0, 1.0, 1.0);
	
	Pi = Pi - floor(Pi * (1.0 / 289.0)) * 289.0;
	vec4 ix = Pi.xzxz;
	vec4 iy = Pi.yyww;
	vec4 fx = Pf.xzxz;
	vec4 fy = Pf.yyww;
	
	vec4 i = (((((((ix*34.0)+1.0)*ix)-floor((((ix*34.0)+1.0)*ix)*(1.0/289.0))*289.0 + iy)*34.0)+1.0)*
		((((ix*34.0)+1.0)*ix)-floor((((ix*34.0)+1.0)*ix)*(1.0/289.0))*289.0 + iy))-
		floor((((((((ix*34.0)+1.0)*ix)-floor((((ix*34.0)+1.0)*ix)*(1.0/289.0))*289.0 + iy)*34.0)+1.0)*
		((((ix*34.0)+1.0)*ix)-floor((((ix*34.0)+1.0)*ix)*(1.0/289.0))*289.0 + iy))*(1.0/289.0))*289.0;
	
	vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;
	vec4 gy = abs(gx) - 0.5 ;
	vec4 tx = floor(gx + 0.5);
	gx = gx - tx;
	
	vec2 g00 = vec2(gx.x,gy.x);
	vec2 g10 = vec2(gx.y,gy.y);
	vec2 g01 = vec2(gx.z,gy.z);
	vec2 g11 = vec2(gx.w,gy.w);
	
	vec4 norm = 1.79284291400159 - 0.85373472095314 * vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));
	g00 *= norm.x;
	g01 *= norm.y;
	g10 *= norm.z;
	g11 *= norm.w;
	
	float n00 = dot(g00, vec2(fx.x, fy.x));
	float n10 = dot(g10, vec2(fx.y, fy.y));
	float n01 = dot(g01, vec2(fx.z, fy.z));
	float n11 = dot(g11, vec2(fx.w, fy.w));
	
	vec2 fade_xy = Pf.xy * Pf.xy * Pf.xy * (Pf.xy * (Pf.xy * 6.0 - 15.0) + 10.0);
	vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);
	float n_xy = mix(n_x.x, n_x.y, fade_xy.y);
	return 2.3 * n_xy;
}
float _perlinNoise2DFBM(vec2 _uv_pn2fbm, int _oct_pn2fbm, vec2 _per_pn2fbm, float _lac_pn2fbm,
						float _persist_pn2fbm, float _rot_pn2fbm, float _ampl_pn2fbm, vec2 _shift_pn2fbm) {
	float _v = 0.0;
	float _a = _ampl_pn2fbm;
	mat2 _r0t = mat2(vec2(cos(_rot_pn2fbm), sin(_rot_pn2fbm)), vec2(-sin(_rot_pn2fbm), cos(_rot_pn2fbm)));
	for (int i = 0; i < _oct_pn2fbm; ++i) {
		_v += _a * _perlin2dNoiseFuncFractal(_uv_pn2fbm * _per_pn2fbm);
		_uv_pn2fbm = _r0t * _uv_pn2fbm * _lac_pn2fbm + _shift_pn2fbm;
		_a *= _persist_pn2fbm;
	}
	return (min(_v, 1.0) + 1.0) * 0.5;
}

void fragment() {
// ColorParameter:10
	vec4 n_out10p0 = CoverColor;


// FloatConstant:14
	float n_out14p0 = 0.600000;


// VectorOp:13
	vec4 n_out13p0 = n_out10p0 * vec4(n_out14p0);


// Input:16
	vec2 n_out16p0 = UV;


// VectorOp:17
	vec2 n_in17p1 = vec2(50.00000, 50.00000);
	vec2 n_out17p0 = n_out16p0 * n_in17p1;


	float n_out20p0;
	float n_out20p1;
// WorleyNoise2D:20
	vec3 n_in20p1 = vec3(0.00000, 0.00000, 0.00000);
	float n_in20p2 = 10.00000;
	float n_in20p3 = 1.00000;
	{
		vec2 n_out20p0n_out20p1 = _cellular2dNoiseFunc((vec3(n_out17p0, 0.0).xy+n_in20p1.xy)*n_in20p2, min(max(n_in20p3, 0.0), 1.0));
		n_out20p0 = n_out20p0n_out20p1.x;
		n_out20p1 = n_out20p0n_out20p1.y;
	}


// FloatFunc:21
	float n_out21p0 = 1.0 - n_out20p0;


// Mix:12
	vec4 n_out12p0 = mix(n_out13p0, n_out10p0, vec4(n_out21p0));


	float n_out5p0;
// FractalPerlinNoise2D:5
	int n_in5p1 = 5;
	vec3 n_in5p2 = vec3(400.00000, 10.00000, 0.00000);
	float n_in5p3 = 2.00000;
	float n_in5p4 = 0.80000;
	float n_in5p5 = 0.00000;
	float n_in5p6 = 0.60000;
	vec3 n_in5p7 = vec3(0.50000, 0.50000, 0.00000);
	{
		n_out5p0 = _perlinNoise2DFBM(UV.xy, int(n_in5p1), n_in5p2.xy, n_in5p3, n_in5p4, n_in5p5, n_in5p6, n_in5p7.xy);
	}


// Texture2D:6
	vec4 n_out6p0 = texture(tex_frg_6, vec2(n_out5p0));


// Input:2
	vec2 n_out2p0 = UV;


// Step:3
	float n_in3p1 = 0.50000;
	float n_out3p0 = step(n_out2p0.x, n_in3p1);


// Mix:4
	vec4 n_out4p0 = mix(n_out12p0, n_out6p0, vec4(n_out3p0));


// FloatFunc:7
	float n_out7p0 = 1.0 - n_out5p0;


	float n_out8p0;
// Remap:8
	float n_in8p1 = 0.00000;
	float n_in8p2 = 1.00000;
	float n_in8p3 = 0.05000;
	float n_in8p4 = 0.20000;
	{
		float __input_range = n_in8p2 - n_in8p1;
		float __output_range = n_in8p4 - n_in8p3;
		n_out8p0 = n_in8p3 + __output_range * ((n_out7p0 - n_in8p1) / __input_range);
	}


// Mix:15
	float n_in15p0 = 0.60000;
	float n_out15p0 = mix(n_in15p0, n_out8p0, n_out3p0);


	float n_out19p0;
// Remap:19
	float n_in19p1 = 0.00000;
	float n_in19p2 = 1.00000;
	float n_in19p3 = 0.20000;
	float n_in19p4 = 0.35000;
	{
		float __input_range = n_in19p2 - n_in19p1;
		float __output_range = n_in19p4 - n_in19p3;
		n_out19p0 = n_in19p3 + __output_range * ((n_out21p0 - n_in19p1) / __input_range);
	}


// Output:0
	ALBEDO = vec3(n_out4p0.xyz);
	METALLIC = n_out3p0;
	ROUGHNESS = n_out15p0;
	SPECULAR = n_out19p0;


}
"
graph_offset = Vector2(-906.975, -299.057)
nodes/fragment/0/position = Vector2(1020, 100)
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_ghm6f")
nodes/fragment/2/position = Vector2(-520, 40)
nodes/fragment/3/node = SubResource("VisualShaderNodeStep_a0tqg")
nodes/fragment/3/position = Vector2(-160, 80)
nodes/fragment/4/node = SubResource("VisualShaderNodeMix_qclid")
nodes/fragment/4/position = Vector2(220, 140)
nodes/fragment/5/node = SubResource("VisualShaderNodeCustom_iyo17")
nodes/fragment/5/position = Vector2(-900, 160)
nodes/fragment/6/node = SubResource("VisualShaderNodeTexture_xfxlk")
nodes/fragment/6/position = Vector2(-460, 360)
nodes/fragment/7/node = SubResource("VisualShaderNodeFloatFunc_1pcks")
nodes/fragment/7/position = Vector2(-200, 480)
nodes/fragment/8/node = SubResource("VisualShaderNodeRemap_xcvyj")
nodes/fragment/8/position = Vector2(80, 500)
nodes/fragment/9/node = SubResource("VisualShaderNodeFloatOp_r6f7o")
nodes/fragment/9/position = Vector2(340, 440)
nodes/fragment/10/node = SubResource("VisualShaderNodeColorParameter_53ept")
nodes/fragment/10/position = Vector2(-520, -220)
nodes/fragment/12/node = SubResource("VisualShaderNodeMix_wa7jw")
nodes/fragment/12/position = Vector2(380, -220)
nodes/fragment/13/node = SubResource("VisualShaderNodeVectorOp_i34mo")
nodes/fragment/13/position = Vector2(140, -320)
nodes/fragment/14/node = SubResource("VisualShaderNodeFloatConstant_1psay")
nodes/fragment/14/position = Vector2(-100, -80)
nodes/fragment/15/node = SubResource("VisualShaderNodeMix_ik8p1")
nodes/fragment/15/position = Vector2(420, 220)
nodes/fragment/16/node = SubResource("VisualShaderNodeInput_0d3y6")
nodes/fragment/16/position = Vector2(-940, -620)
nodes/fragment/17/node = SubResource("VisualShaderNodeVectorOp_wmb6b")
nodes/fragment/17/position = Vector2(-580, -640)
nodes/fragment/19/node = SubResource("VisualShaderNodeRemap_chcvw")
nodes/fragment/19/position = Vector2(620, -360)
nodes/fragment/20/node = SubResource("VisualShaderNodeCustom_4vtb4")
nodes/fragment/20/position = Vector2(-320, -640)
nodes/fragment/21/node = SubResource("VisualShaderNodeFloatFunc_ddh3w")
nodes/fragment/21/position = Vector2(200, -520)
nodes/fragment/connections = PackedInt32Array(2, 0, 3, 0, 3, 0, 4, 2, 4, 0, 0, 0, 5, 0, 6, 0, 6, 0, 4, 1, 5, 0, 7, 0, 7, 0, 8, 0, 3, 0, 0, 2, 8, 0, 9, 1, 3, 0, 9, 0, 10, 0, 12, 1, 12, 0, 4, 0, 10, 0, 13, 0, 13, 0, 12, 0, 14, 0, 13, 1, 3, 0, 15, 2, 15, 0, 0, 3, 8, 0, 15, 1, 16, 0, 17, 0, 17, 0, 20, 0, 21, 0, 12, 2, 21, 0, 19, 0, 19, 0, 0, 4, 20, 0, 21, 0)
