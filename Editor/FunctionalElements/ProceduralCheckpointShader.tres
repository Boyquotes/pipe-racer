[gd_resource type="VisualShader" load_steps=26 format=3 uid="uid://cq1srv2lm6tb6"]

[ext_resource type="Script" path="res://addons/shaderV/uv/transformUV.gd" id="1_3jaaf"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/worley3d.gd" id="2_wjuyv"]
[ext_resource type="Script" path="res://addons/shaderV/tools/TimeScaled.gd" id="3_b664d"]
[ext_resource type="Script" path="res://addons/shaderV/uv/scaleUV.gd" id="4_l8sep"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/fractal/generic2d_fractal.gd" id="5_rpyhw"]

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_tkxvg"]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_rm63h"]
parameter_name = "offset"
hint = 2
max = 4.0
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_mjeq4"]
size = Vector2(372.148, 219.398)
expression = "y = ((sin(x) + 1.0)/2.0);
y *= y;"

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_vgio1"]
default_input_values = [1, Vector3(0, 0, 0), 2, Vector3(1, 1, 0), 3, Vector3(0.5, 0.5, 0), 4, 1.571, 5, Vector3(0.5, 0.5, 0)]
initialized = true
script = ExtResource("1_3jaaf")

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_f2vfe"]
parameter_name = "Direction"
hint = 2
max = 6.283
default_value_enabled = true
default_value = 1.571

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_117eo"]
parameter_name = "ring_color1"
default_value_enabled = true
default_value = Color(1, 0, 0, 1)

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_sdjnj"]
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(0, 0, 0, 0)]
op_type = 2
operator = 2

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_en2e4"]
output_port_for_preview = 0
default_input_values = [1, Vector3(0, 0, 0), 2, 50.0, 3, 1.0, 4, 0.0]
initialized = true
script = ExtResource("2_wjuyv")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_vieum"]
default_input_values = [0, 1.0]
initialized = true
script = ExtResource("3_b664d")

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_fj2yk"]
default_input_values = [1, Vector3(0.1, 1, 0), 2, Vector3(0.5, 0.5, 0)]
initialized = true
script = ExtResource("4_l8sep")

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_xm5rc"]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_u3lvn"]
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(0, 0, 0, 0)]
op_type = 2
operator = 2

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_day4l"]
output_port_for_preview = 0
default_input_values = [1, 6, 2, Vector3(0.5, 8, 0), 3, 4.0, 4, 0.8, 5, 0.0, 6, 0.3, 7, Vector3(0.5, 0.5, 0)]
initialized = true
script = ExtResource("5_rpyhw")

[sub_resource type="VisualShaderNodeRemap" id="VisualShaderNodeRemap_gcpto"]
default_input_values = [1, 0.0, 2, 1.0, 3, 0.1, 4, 0.4]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_560qu"]
parameter_name = "speed"
hint = 2
min = 0.1
max = 30.0
default_value_enabled = true
default_value = 6.0

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_2b0jo"]
default_input_values = [0, 6.0]
initialized = true
script = ExtResource("3_b664d")

[sub_resource type="VisualShaderNodeIntParameter" id="VisualShaderNodeIntParameter_eq241"]
parameter_name = "segments"
hint = 2
min = 1
default_value_enabled = true
default_value = 4

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_3kvd4"]
default_input_values = [0, 3.142, 1, 6.0]
operator = 2

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_u47cj"]
default_input_values = [0, 0.0, 1, 3.142]
operator = 2

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_tp76q"]

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx;

uniform vec4 ring_color1 : source_color = vec4(1.000000, 0.000000, 0.000000, 1.000000);
uniform float speed : hint_range(0.10000000149012, 30, 0.10000000149012) = 6;
uniform float Direction : hint_range(0, 6.28299999237061, 0.10000000149012) = 1.57099997997284;
uniform int segments : hint_range(1, 100, 1) = 4;
uniform float offset : hint_range(0, 4, 0.10000000149012) = 1;


// ScaleUV
vec2 _scaleUV(vec2 _scale_uv, vec2 _scale_vect, vec2 _pivot_vect) {
	return (_scale_uv - _pivot_vect) * _scale_vect + _pivot_vect;
}
// WorleyNoise3D
vec2 _cellular3dNoiseFunc(vec3 P, float _jitter_w3d) {
	float K = 0.142857142857;
	float Ko = 0.428571428571;
	float K2 = 0.020408163265306;
	float Kz = 0.166666666667;
	float Kzo = 0.416666666667;
	
	vec3 Pi = floor(P) - floor(floor(P) * (1.0 / 289.0)) * 289.0;
	vec3 Pf = fract(P) - 0.5;
	
	vec3 Pfx = Pf.x + vec3(1.0, 0.0, -1.0);
	vec3 Pfy = Pf.y + vec3(1.0, 0.0, -1.0);
	vec3 Pfz = Pf.z + vec3(1.0, 0.0, -1.0);
	
	vec3 p = ((34.0*(Pi.x+vec3(-1.0,0.0,1.0))+1.0)*(Pi.x+vec3(-1.0,0.0,1.0)))-floor(((34.0*(Pi.x+vec3(-1.0,0.0,1.0))+1.0)
				*(Pi.x+vec3(-1.0,0.0,1.0)))*(1.0/289.0))*289.0;
	vec3 p1 = ((34.0*(p+Pi.y-1.0)+1.0)*(p+Pi.y-1.0))-floor(((34.0*(p+Pi.y-1.0)+1.0)*(p+Pi.y-1.0))*(1.0/289.0))*289.0;
	vec3 p2 = ((34.0*(p+Pi.y)+1.0)*(p+Pi.y))-floor(((34.0*(p+Pi.y)+1.0)*(p+Pi.y))*(1.0/289.0))*289.0;
	vec3 p3 = ((34.0*(p+Pi.y+1.0)+1.0)*(p+Pi.y+1.0))-floor(((34.0*(p+Pi.y+1.0)+1.0)*(p+Pi.y+1.0))*(1.0/289.0))*289.0;
	
	vec3 p11 = ((34.0*(p1+Pi.z-1.0)+1.0)*(p1+Pi.z-1.0))-floor(((34.0*(p1+Pi.z-1.0)+1.0)*(p1+Pi.z-1.0))*(1.0/289.0))*289.0;
	vec3 p12 = ((34.0*(p1+Pi.z)+1.0)*(p1+Pi.z))-floor(((34.0*(p1+Pi.z)+1.0)*(p1+Pi.z))*(1.0/289.0))*289.0;
	vec3 p13 = ((34.0*(p1+Pi.z+1.0)+1.0)*(p1+Pi.z+1.0))-floor(((34.0*(p1+Pi.z+1.0)+1.0)*(p1+Pi.z+1.0))*(1.0/289.0))*289.0;
	
	vec3 p21 = ((34.0*(p2+Pi.z-1.0)+1.0)*(p2+Pi.z-1.0))-floor(((34.0*(p2+Pi.z-1.0)+1.0)*(p2+Pi.z-1.0))*(1.0/289.0))*289.0;
	vec3 p22 = ((34.0*(p2+Pi.z)+1.0)*(p2+Pi.z))-floor(((34.0*(p2+Pi.z)+1.0)*(p2+Pi.z))*(1.0/289.0))*289.0;
	vec3 p23 = ((34.0*(p2+Pi.z+1.0)+1.0)*(p2+Pi.z+1.0))-floor(((34.0*(p2+Pi.z+1.0)+1.0)*(p2+Pi.z+1.0))*(1.0/289.0))*289.0;
	
	vec3 p31 = ((34.0*(p3+Pi.z-1.0)+1.0)*(p3+Pi.z-1.0))-floor(((34.0*(p3+Pi.z-1.0)+1.0)*(p3+Pi.z-1.0))*(1.0/289.0))*289.0;
	vec3 p32 = ((34.0*(p3+Pi.z)+1.0)*(p3+Pi.z))-floor(((34.0*(p3+Pi.z)+1.0)*(p3+Pi.z))*(1.0/289.0))*289.0;
	vec3 p33 = ((34.0*(p3+Pi.z+1.0)+1.0)*(p3+Pi.z+1.0))-floor(((34.0*(p3+Pi.z+1.0)+1.0)*(p3+Pi.z+1.0))*(1.0/289.0))*289.0;
	
	vec3 ox11 = fract(p11*K) - Ko;
	vec3 oy11 = ((floor(p11*K))-floor((floor(p11*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz11 = floor(p11*K2)*Kz - Kzo;
	
	vec3 ox12 = fract(p12*K) - Ko;
	vec3 oy12 = ((floor(p12*K))-floor((floor(p12*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz12 = floor(p12*K2)*Kz - Kzo;
	
	vec3 ox13 = fract(p13*K) - Ko;
	vec3 oy13 = ((floor(p13*K))-floor((floor(p13*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz13 = floor(p13*K2)*Kz - Kzo;
	
	vec3 ox21 = fract(p21*K) - Ko;
	vec3 oy21 = ((floor(p21*K))-floor((floor(p21*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz21 = floor(p21*K2)*Kz - Kzo;
	
	vec3 ox22 = fract(p22*K) - Ko;
	vec3 oy22 = ((floor(p22*K))-floor((floor(p22*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz22 = floor(p22*K2)*Kz - Kzo;
	
	vec3 ox23 = fract(p23*K) - Ko;
	vec3 oy23 = ((floor(p23*K))-floor((floor(p23*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz23 = floor(p23*K2)*Kz - Kzo;
	
	vec3 ox31 = fract(p31*K) - Ko;
	vec3 oy31 = ((floor(p31*K))-floor((floor(p31*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz31 = floor(p31*K2)*Kz - Kzo;
	
	vec3 ox32 = fract(p32*K) - Ko;
	vec3 oy32 = ((floor(p32*K))-floor((floor(p32*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz32 = floor(p32*K2)*Kz - Kzo;
	
	vec3 ox33 = fract(p33*K) - Ko;
	vec3 oy33 = ((floor(p33*K))-floor((floor(p33*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz33 = floor(p33*K2)*Kz - Kzo;
	
	vec3 dx11 = Pfx + _jitter_w3d*ox11;
	vec3 dy11 = Pfy.x + _jitter_w3d*oy11;
	vec3 dz11 = Pfz.x + _jitter_w3d*oz11;
	
	vec3 dx12 = Pfx + _jitter_w3d*ox12;
	vec3 dy12 = Pfy.x + _jitter_w3d*oy12;
	vec3 dz12 = Pfz.y + _jitter_w3d*oz12;
	
	vec3 dx13 = Pfx + _jitter_w3d*ox13;
	vec3 dy13 = Pfy.x + _jitter_w3d*oy13;
	vec3 dz13 = Pfz.z + _jitter_w3d*oz13;
	
	vec3 dx21 = Pfx + _jitter_w3d*ox21;
	vec3 dy21 = Pfy.y + _jitter_w3d*oy21;
	vec3 dz21 = Pfz.x + _jitter_w3d*oz21;
	
	vec3 dx22 = Pfx + _jitter_w3d*ox22;
	vec3 dy22 = Pfy.y + _jitter_w3d*oy22;
	vec3 dz22 = Pfz.y + _jitter_w3d*oz22;
	
	vec3 dx23 = Pfx + _jitter_w3d*ox23;
	vec3 dy23 = Pfy.y + _jitter_w3d*oy23;
	vec3 dz23 = Pfz.z + _jitter_w3d*oz23;
	
	vec3 dx31 = Pfx + _jitter_w3d*ox31;
	vec3 dy31 = Pfy.z + _jitter_w3d*oy31;
	vec3 dz31 = Pfz.x + _jitter_w3d*oz31;
	
	vec3 dx32 = Pfx + _jitter_w3d*ox32;
	vec3 dy32 = Pfy.z + _jitter_w3d*oy32;
	vec3 dz32 = Pfz.y + _jitter_w3d*oz32;
	
	vec3 dx33 = Pfx + _jitter_w3d*ox33;
	vec3 dy33 = Pfy.z + _jitter_w3d*oy33;
	vec3 dz33 = Pfz.z + _jitter_w3d*oz33;
	
	vec3 d11 = dx11 * dx11 + dy11 * dy11 + dz11 * dz11;
	vec3 d12 = dx12 * dx12 + dy12 * dy12 + dz12 * dz12;
	vec3 d13 = dx13 * dx13 + dy13 * dy13 + dz13 * dz13;
	vec3 d21 = dx21 * dx21 + dy21 * dy21 + dz21 * dz21;
	vec3 d22 = dx22 * dx22 + dy22 * dy22 + dz22 * dz22;
	vec3 d23 = dx23 * dx23 + dy23 * dy23 + dz23 * dz23;
	vec3 d31 = dx31 * dx31 + dy31 * dy31 + dz31 * dz31;
	vec3 d32 = dx32 * dx32 + dy32 * dy32 + dz32 * dz32;
	vec3 d33 = dx33 * dx33 + dy33 * dy33 + dz33 * dz33;

	vec3 d1a = min(d11, d12);
	d12 = max(d11, d12);
	d11 = min(d1a, d13);
	d13 = max(d1a, d13);
	d12 = min(d12, d13);
	vec3 d2a = min(d21, d22);
	d22 = max(d21, d22);
	d21 = min(d2a, d23);
	d23 = max(d2a, d23);
	d22 = min(d22, d23);
	vec3 d3a = min(d31, d32);
	d32 = max(d31, d32);
	d31 = min(d3a, d33);
	d33 = max(d3a, d33);
	d32 = min(d32, d33);
	vec3 da = min(d11, d21);
	d21 = max(d11, d21);
	d11 = min(da, d31);
	d31 = max(da, d31);
	d11.xy = (d11.x < d11.y) ? d11.xy : d11.yx;
	d11.xz = (d11.x < d11.z) ? d11.xz : d11.zx;
	d12 = min(d12, d21);
	d12 = min(d12, d22);
	d12 = min(d12, d31);
	d12 = min(d12, d32);
	d11.yz = min(d11.yz,d12.xy);
	d11.y = min(d11.y,d12.z);
	d11.y = min(d11.y,d11.z);
	return sqrt(d11.xy);
}
// TransformUV
vec2 _transformUV(vec2 _uv_transform, vec2 _scale_uv_, vec2 _pivot_scale_uv_, vec2 _offset_uv_, float _rotate_uv, vec2 _pivot_rotate_uv_){
	_uv_transform -= _offset_uv_; // offset
	_uv_transform = (_uv_transform - _pivot_scale_uv_) * _scale_uv_ + _pivot_scale_uv_; // zoom
	vec2 _rot_uv_angl = vec2(cos(_rotate_uv), sin(_rotate_uv));
	mat2 _rot_matrix = mat2(vec2(_rot_uv_angl.x, - _rot_uv_angl.y), vec2(_rot_uv_angl.y, _rot_uv_angl.x));
	_uv_transform = (_uv_transform - _pivot_rotate_uv_) * _rot_matrix + _pivot_rotate_uv_; // rotate
	return _uv_transform;
}
// FractalGenericNoise2D
float _hash2_gener1c2DFractal(vec2 _p_hash2_gener1c) {
	return (fract(1e4 * sin(17.0 * _p_hash2_gener1c.x + _p_hash2_gener1c.y * 0.1) *
					(0.1 + abs(sin(_p_hash2_gener1c.y * 13.0 + _p_hash2_gener1c.x)))));
}
float _genericNoise2DFractal(vec2 _x_gener1c2D) {
	vec2 _temp_i_gener1c2D = floor(_x_gener1c2D);
	vec2 _temp_f_gener1c2D = fract(_x_gener1c2D);

	float _a_g1n2 = _hash2_gener1c2DFractal(_temp_i_gener1c2D);
	float _b_g1n2 = _hash2_gener1c2DFractal(_temp_i_gener1c2D + vec2(1.0, 0.0));
	float _c_g1n2 = _hash2_gener1c2DFractal(_temp_i_gener1c2D + vec2(0.0, 1.0));
	float _d_g1n2 = _hash2_gener1c2DFractal(_temp_i_gener1c2D + vec2(1.0, 1.0));
	
	vec2 _u_g1n2 = _temp_f_gener1c2D * _temp_f_gener1c2D * (3.0 - 2.0 * _temp_f_gener1c2D);
	return (mix(_a_g1n2, _b_g1n2, _u_g1n2.x) + (_c_g1n2 - _a_g1n2) *
				_u_g1n2.y * (1.0 - _u_g1n2.x) + (_d_g1n2 - _b_g1n2) * _u_g1n2.x * _u_g1n2.y);
}
float _genericNoise2DFBM(vec2 _uv_gnfbm, int _oct_gnfbm, vec2 _per_gnfbm, float _lac_gnfbm,
						float _persist_gnfbm, float _rot_gnfbm, float _ampl_gnfbm, vec2 _shift_gnfbm) {
	float _v = 0.0;
	float _a = _ampl_gnfbm;
	mat2 _r0t = mat2(vec2(cos(_rot_gnfbm), sin(_rot_gnfbm)), vec2(-sin(_rot_gnfbm), cos(_rot_gnfbm)));
	for (int i = 0; i < _oct_gnfbm; ++i) {
		_v += _a * _genericNoise2DFractal(_uv_gnfbm * _per_gnfbm);
		_uv_gnfbm = _r0t * _uv_gnfbm * _lac_gnfbm + _shift_gnfbm;
		_a *= _persist_gnfbm;
	}
	return _v;
}

void fragment() {
	vec3 n_out19p0;
// ScaleUV:19
	vec3 n_in19p1 = vec3(0.10000, 1.00000, 0.00000);
	vec3 n_in19p2 = vec3(0.50000, 0.50000, 0.00000);
	{
		n_out19p0.xy = _scaleUV(UV.xy, n_in19p1.xy, n_in19p2.xy);
	}


	float n_out18p0;
// ScaledTIME:18
	float n_in18p0 = 1.00000;
	{
		n_out18p0 = n_in18p0 * TIME;
	}


	float n_out17p0;
	float n_out17p1;
// WorleyNoise3D:17
	vec3 n_in17p1 = vec3(0.00000, 0.00000, 0.00000);
	float n_in17p2 = 50.00000;
	float n_in17p3 = 1.00000;
	{
		vec2 n_out17p0n_out17p1 = _cellular3dNoiseFunc(vec3((n_out19p0.xy+n_in17p1.xy)*n_in17p2, n_out18p0), min(max(n_in17p3, 0.0), 1.0));
		n_out17p0 = n_out17p0n_out17p1.x;
		n_out17p1 = n_out17p0n_out17p1.y;
	}


// ColorParameter:15
	vec4 n_out15p0 = ring_color1;


// FloatParameter:3
	float n_out3p0 = speed;


	float n_out4p0;
// ScaledTIME:4
	{
		n_out4p0 = n_out3p0 * TIME;
	}


// FloatParameter:14
	float n_out14p0 = Direction;


	vec3 n_out13p0;
// TransformUV:13
	vec3 n_in13p1 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in13p2 = vec3(1.00000, 1.00000, 0.00000);
	vec3 n_in13p3 = vec3(0.50000, 0.50000, 0.00000);
	vec3 n_in13p5 = vec3(0.50000, 0.50000, 0.00000);
	{
		n_out13p0.xy = _transformUV(UV.xy, n_in13p2.xy, n_in13p3.xy, n_in13p1.xy, n_out14p0, n_in13p5.xy);
	}


// IntParameter:5
	int n_out5p0 = segments;


// FloatOp:6
	float n_in6p0 = 3.14200;
	float n_out6p0 = n_in6p0 * float(n_out5p0);


// FloatOp:7
	float n_out7p0 = n_out13p0.x * n_out6p0;


// FloatOp:9
	float n_out9p0 = n_out4p0 + n_out7p0;


// FloatParameter:11
	float n_out11p0 = offset;


// FloatOp:10
	float n_out10p0 = n_out9p0 + n_out11p0;


	float n_out12p0;
// Expression:12
	n_out12p0 = 0.0;
	{
		n_out12p0 = ((sin(n_out10p0) + 1.0)/2.0);
		n_out12p0 *= n_out12p0;
	}


// VectorOp:16
	vec4 n_out16p0 = n_out15p0 * vec4(n_out12p0);


// VectorOp:20
	vec4 n_out20p0 = vec4(n_out17p0) * n_out16p0;


	float n_out21p0;
// FractalGenericNoise2D:21
	int n_in21p1 = 6;
	vec3 n_in21p2 = vec3(0.50000, 8.00000, 0.00000);
	float n_in21p3 = 4.00000;
	float n_in21p4 = 0.80000;
	float n_in21p5 = 0.00000;
	float n_in21p6 = 0.30000;
	vec3 n_in21p7 = vec3(0.50000, 0.50000, 0.00000);
	{
		n_out21p0 = _genericNoise2DFBM(UV.xy, int(n_in21p1), n_in21p2.xy, n_in21p3, n_in21p4, n_in21p5, n_in21p6, n_in21p7.xy);
	}


	float n_out22p0;
// Remap:22
	float n_in22p1 = 0.00000;
	float n_in22p2 = 1.00000;
	float n_in22p3 = 0.10000;
	float n_in22p4 = 0.40000;
	{
		float __input_range = n_in22p2 - n_in22p1;
		float __output_range = n_in22p4 - n_in22p3;
		n_out22p0 = n_in22p3 + __output_range * ((n_out21p0 - n_in22p1) / __input_range);
	}


// Output:0
	ALBEDO = vec3(n_out20p0.xyz);
	ROUGHNESS = n_out22p0;
	EMISSION = vec3(n_out20p0.xyz);


}
"
graph_offset = Vector2(-1282.59, 281.063)
nodes/fragment/0/position = Vector2(1360, 160)
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_xm5rc")
nodes/fragment/2/position = Vector2(-740, 40)
nodes/fragment/3/node = SubResource("VisualShaderNodeFloatParameter_560qu")
nodes/fragment/3/position = Vector2(-1480, 140)
nodes/fragment/4/node = SubResource("VisualShaderNodeCustom_2b0jo")
nodes/fragment/4/position = Vector2(-1060, 240)
nodes/fragment/5/node = SubResource("VisualShaderNodeIntParameter_eq241")
nodes/fragment/5/position = Vector2(-1600, 500)
nodes/fragment/6/node = SubResource("VisualShaderNodeFloatOp_3kvd4")
nodes/fragment/6/position = Vector2(-960, 480)
nodes/fragment/7/node = SubResource("VisualShaderNodeFloatOp_u47cj")
nodes/fragment/7/position = Vector2(-620, 580)
nodes/fragment/9/node = SubResource("VisualShaderNodeFloatOp_tp76q")
nodes/fragment/9/position = Vector2(-400, 560)
nodes/fragment/10/node = SubResource("VisualShaderNodeFloatOp_tkxvg")
nodes/fragment/10/position = Vector2(-160, 640)
nodes/fragment/11/node = SubResource("VisualShaderNodeFloatParameter_rm63h")
nodes/fragment/11/position = Vector2(-520, 740)
nodes/fragment/12/node = SubResource("VisualShaderNodeExpression_mjeq4")
nodes/fragment/12/position = Vector2(60, 620)
nodes/fragment/12/size = Vector2(372.148, 219.398)
nodes/fragment/12/input_ports = "0,0,x;"
nodes/fragment/12/output_ports = "0,0,y;"
nodes/fragment/12/expression = "y = ((sin(x) + 1.0)/2.0);
y *= y;"
nodes/fragment/13/node = SubResource("VisualShaderNodeCustom_vgio1")
nodes/fragment/13/position = Vector2(-1120, 740)
nodes/fragment/14/node = SubResource("VisualShaderNodeFloatParameter_f2vfe")
nodes/fragment/14/position = Vector2(-1640, 900)
nodes/fragment/15/node = SubResource("VisualShaderNodeColorParameter_117eo")
nodes/fragment/15/position = Vector2(220, 320)
nodes/fragment/16/node = SubResource("VisualShaderNodeVectorOp_sdjnj")
nodes/fragment/16/position = Vector2(640, 500)
nodes/fragment/17/node = SubResource("VisualShaderNodeCustom_en2e4")
nodes/fragment/17/position = Vector2(560, 60)
nodes/fragment/18/node = SubResource("VisualShaderNodeCustom_vieum")
nodes/fragment/18/position = Vector2(320, 160)
nodes/fragment/19/node = SubResource("VisualShaderNodeCustom_fj2yk")
nodes/fragment/19/position = Vector2(320, 20)
nodes/fragment/20/node = SubResource("VisualShaderNodeVectorOp_u3lvn")
nodes/fragment/20/position = Vector2(840, 340)
nodes/fragment/21/node = SubResource("VisualShaderNodeCustom_day4l")
nodes/fragment/21/position = Vector2(560, -380)
nodes/fragment/22/node = SubResource("VisualShaderNodeRemap_gcpto")
nodes/fragment/22/position = Vector2(1085.31, 71.5842)
nodes/fragment/connections = PackedInt32Array(3, 0, 4, 0, 5, 0, 6, 1, 6, 0, 7, 1, 9, 0, 10, 0, 11, 0, 10, 1, 10, 0, 12, 0, 7, 0, 9, 1, 4, 0, 9, 0, 13, 0, 7, 0, 14, 0, 13, 4, 15, 0, 16, 0, 12, 0, 16, 1, 18, 0, 17, 4, 19, 0, 17, 0, 17, 0, 20, 0, 16, 0, 20, 1, 20, 0, 0, 0, 22, 0, 0, 3, 21, 0, 22, 0, 20, 0, 0, 5)
