[gd_resource type="VisualShader" load_steps=13 format=3 uid="uid://ddhtdhtpsdk5r"]

[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/worley2d.gd" id="1_mhpvw"]

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_qdnph"]
default_input_values = [0, Vector2(0, 0), 1, Vector2(0.5, 0.5)]
op_type = 0
operator = 1

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_32y2s"]
default_input_values = [1, Vector3(0, 0, 0), 2, 4.0, 3, 1.0]
initialized = true
script = ExtResource("1_mhpvw")

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_y2n0c"]
expanded_output_ports = [0]
input_name = "color"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_acbhm"]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorDistance" id="VisualShaderNodeVectorDistance_h8cyq"]
output_port_for_preview = 0
default_input_values = [0, Vector2(0, 0), 1, Vector2(0, 0)]
op_type = 0

[sub_resource type="Curve" id="Curve_7lyhi"]
_data = [Vector2(0.395881, 0.17739), 0.0, 0.0, 0, 0, Vector2(0.487309, 0), 0.0, 0.0, 0, 0]
point_count = 2

[sub_resource type="CurveTexture" id="CurveTexture_gtmh3"]
curve = SubResource("Curve_7lyhi")

[sub_resource type="VisualShaderNodeCurveTexture" id="VisualShaderNodeCurveTexture_2h6s6"]
texture = SubResource("CurveTexture_gtmh3")

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_8kpy8"]
default_input_values = [0, 1.0, 1, 0.0]
operator = 2

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_hpnsg"]
default_input_values = [0, 1.0, 1, 0.0]
operator = 2

[sub_resource type="VisualShaderNodeBillboard" id="VisualShaderNodeBillboard_11aq1"]
billboard_type = 3
keep_scale = true

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx, depth_prepass_alpha, unshaded;

uniform sampler2D curve_frg_6 : repeat_disable;


// WorleyNoise2D
vec2 _cellular2dNoiseFunc(vec2 P, float _jitter_w2d) {
	float K = 0.142857142857; // 1/7
	float Ko = 0.428571428571; // 3/7
	
	vec2 Pi = floor(P) - floor(floor(P) * (1.0 / 289.0)) * 289.0;
	vec2 Pf = fract(P);
	vec3 oi = vec3(-1.0, 0.0, 1.0);
	vec3 of = vec3(-0.5, 0.5, 1.5);
	vec3 px = (34.0*(Pi.x+oi)+1.0)*(Pi.x+oi)-floor((34.0*(Pi.x+oi)+1.0)*(Pi.x+oi)*(1.0/289.0))* 289.0;
	vec3 p = (34.0*(px.x+Pi.y+ oi)+1.0)*(px.x+Pi.y+ oi)-floor((34.0*(px.x+Pi.y+oi)+1.0)*(px.x+Pi.y+ oi)*(1.0/289.0))*289.0;
	vec3 ox = fract(p*K) - Ko;
	vec3 oy = (floor(p*K) - floor(floor(p*K) * (1.0 / 7.0)) * 7.0) * K - Ko;
	vec3 dx = Pf.x + 0.5 + _jitter_w2d*ox;
	vec3 dy = Pf.y - of + _jitter_w2d*oy;
	vec3 d1 = dx * dx + dy * dy;
	p = (34.0*(px.y+Pi.y+oi)+1.0)*(px.y+Pi.y+oi)-floor((34.0*(px.y+Pi.y+oi)+1.0)*(px.y+Pi.y+oi)*(1.0/289.0))*289.0;
	ox = fract(p*K) - Ko;
	oy = (floor(p*K) - floor(floor(p*K) * (1.0 / 7.0)) * 7.0) * K - Ko;
	dx = Pf.x - 0.5 + _jitter_w2d*ox;
	dy = Pf.y - of + _jitter_w2d*oy;
	vec3 d2 = dx * dx + dy * dy;
	p = (34.0*(px.z+Pi.y+oi)+1.0)*(px.z+Pi.y+oi)-floor((34.0*(px.z+Pi.y+oi)+1.0)*(px.z+Pi.y+oi)*(1.0/289.0))*289.0;
	ox = fract(p*K) - Ko;
	oy = (floor(p*K) - floor(floor(p*K) * (1.0 / 7.0)) * 7.0) * K - Ko;
	dx = Pf.x - 1.5 + _jitter_w2d*ox;
	dy = Pf.y - of + _jitter_w2d*oy;
	vec3 d3 = dx * dx + dy * dy;
	vec3 d1a = min(d1, d2);
	d2 = max(d1, d2);
	d2 = min(d2, d3);
	d1 = min(d1a, d2);
	d2 = max(d1a, d2);
	d1.xy = (d1.x < d1.y) ? d1.xy : d1.yx;
	d1.xz = (d1.x < d1.z) ? d1.xz : d1.zx;
	d1.yz = min(d1.yz, d2.yz);
	d1.y = min(d1.y, d1.z);
	d1.y = min(d1.y, d2.x);
	return sqrt(d1.xy);
}

void vertex() {
	mat4 n_out2p0;
// GetBillboardMatrix:2
	{
		mat4 __wm = mat4(normalize(INV_VIEW_MATRIX[0]), normalize(INV_VIEW_MATRIX[1]), normalize(INV_VIEW_MATRIX[2]), MODEL_MATRIX[3]);
		__wm = __wm * mat4(vec4(cos(INSTANCE_CUSTOM.x), -sin(INSTANCE_CUSTOM.x), 0.0, 0.0), vec4(sin(INSTANCE_CUSTOM.x), cos(INSTANCE_CUSTOM.x), 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0));
		__wm = __wm * mat4(vec4(length(MODEL_MATRIX[0].xyz), 0.0, 0.0, 0.0), vec4(0.0, length(MODEL_MATRIX[1].xyz), 0.0, 0.0), vec4(0.0, 0.0, length(MODEL_MATRIX[2].xyz), 0.0), vec4(0.0, 0.0, 0.0, 1.0));
		n_out2p0 = VIEW_MATRIX * __wm;
	}


// Output:0
	MODELVIEW_MATRIX = n_out2p0;


}

void fragment() {
// Input:2
	vec4 n_out2p0 = COLOR;
	float n_out2p4 = n_out2p0.a;


	float n_out12p0;
	float n_out12p1;
// WorleyNoise2D:12
	vec3 n_in12p1 = vec3(0.00000, 0.00000, 0.00000);
	float n_in12p2 = 4.00000;
	float n_in12p3 = 1.00000;
	{
		vec2 n_out12p0n_out12p1 = _cellular2dNoiseFunc((UV.xy+n_in12p1.xy)*n_in12p2, min(max(n_in12p3, 0.0), 1.0));
		n_out12p0 = n_out12p0n_out12p1.x;
		n_out12p1 = n_out12p0n_out12p1.y;
	}


// Input:3
	vec2 n_out3p0 = UV;


// VectorOp:11
	vec2 n_in11p1 = vec2(0.50000, 0.50000);
	vec2 n_out11p0 = n_out3p0 - n_in11p1;


// Distance:5
	vec2 n_in5p1 = vec2(0.00000, 0.00000);
	float n_out5p0 = distance(n_out11p0, n_in5p1);


// CurveTexture:6
	float n_out6p0 = texture(curve_frg_6, vec2(n_out5p0)).r;


// FloatOp:8
	float n_out8p0 = n_out12p0 * n_out6p0;


// FloatOp:7
	float n_out7p0 = n_out2p4 * n_out8p0;


// Output:0
	ALBEDO = vec3(n_out2p0.xyz);
	ALPHA = n_out7p0;


}
"
graph_offset = Vector2(-503.457, -2.26987)
flags/depth_prepass_alpha = true
flags/unshaded = true
nodes/vertex/2/node = SubResource("VisualShaderNodeBillboard_11aq1")
nodes/vertex/2/position = Vector2(-200, 240)
nodes/vertex/connections = PackedInt32Array(2, 0, 0, 10)
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_y2n0c")
nodes/fragment/2/position = Vector2(-100, -20)
nodes/fragment/3/node = SubResource("VisualShaderNodeInput_acbhm")
nodes/fragment/3/position = Vector2(-960, 60)
nodes/fragment/5/node = SubResource("VisualShaderNodeVectorDistance_h8cyq")
nodes/fragment/5/position = Vector2(-580, 380)
nodes/fragment/6/node = SubResource("VisualShaderNodeCurveTexture_2h6s6")
nodes/fragment/6/position = Vector2(-400, 660)
nodes/fragment/7/node = SubResource("VisualShaderNodeFloatOp_8kpy8")
nodes/fragment/7/position = Vector2(240, 240)
nodes/fragment/8/node = SubResource("VisualShaderNodeFloatOp_hpnsg")
nodes/fragment/8/position = Vector2(40, 460)
nodes/fragment/11/node = SubResource("VisualShaderNodeVectorOp_qdnph")
nodes/fragment/11/position = Vector2(-600, 220)
nodes/fragment/12/node = SubResource("VisualShaderNodeCustom_32y2s")
nodes/fragment/12/position = Vector2(-260, 340)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 0, 7, 0, 0, 1, 2, 4, 7, 0, 5, 0, 6, 0, 6, 0, 8, 1, 8, 0, 7, 1, 3, 0, 11, 0, 11, 0, 5, 0, 12, 0, 8, 0)
