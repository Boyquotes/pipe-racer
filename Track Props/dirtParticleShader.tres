[gd_resource type="VisualShader" load_steps=16 format=3 uid="uid://ddhtdhtpsdk5r"]

[ext_resource type="Script" path="res://addons/shaderV/tools/TimeScaled.gd" id="1_fyiy1"]
[ext_resource type="Script" path="res://addons/shaderV/uv/transformUV.gd" id="2_5iftr"]
[ext_resource type="Script" path="res://addons/shaderV/rgba/noise/worley3d.gd" id="3_11p0l"]

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_c6akn"]
default_input_values = [0, 3.0]
initialized = true
script = ExtResource("1_fyiy1")

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_y2n0c"]
expanded_output_ports = [0]
input_name = "color"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_acbhm"]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_knl50"]
output_port_for_preview = 0
default_input_values = [1, Vector3(0.5, 0.5, 0), 2, Vector3(1, 1, 0), 3, Vector3(0.5, 0.5, 0), 4, 0.0, 5, Vector3(0.5, 0.5, 0)]
initialized = true
script = ExtResource("2_5iftr")

[sub_resource type="VisualShaderNodeVectorDistance" id="VisualShaderNodeVectorDistance_h8cyq"]
output_port_for_preview = 0
default_input_values = [0, Vector2(0, 0), 1, Vector2(0, 0)]
op_type = 0

[sub_resource type="Curve" id="Curve_7lyhi"]
_data = [Vector2(0.395881, 0.17739), 0.0, 0.0, 0, 0, Vector2(0.487309, 0), 0.0, 0.0, 0, 0]
point_count = 2

[sub_resource type="CurveTexture" id="CurveTexture_gtmh3"]
curve = SubResource("Curve_7lyhi")

[sub_resource type="VisualShaderNodeCurveTexture" id="VisualShaderNodeCurveTexture_2h6s6"]
texture = SubResource("CurveTexture_gtmh3")

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_8kpy8"]
default_input_values = [0, 1.0, 1, 0.0]
operator = 2

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_hpnsg"]
default_input_values = [0, 1.0, 1, 0.0]
operator = 2

[sub_resource type="VisualShaderNodeCustom" id="VisualShaderNodeCustom_52ukr"]
default_input_values = [1, Vector3(0, 0, 0), 2, 4.0, 3, 1.0, 4, 0.0]
initialized = true
script = ExtResource("3_11p0l")

[sub_resource type="VisualShaderNodeBillboard" id="VisualShaderNodeBillboard_11aq1"]
billboard_type = 3
keep_scale = true

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx, depth_prepass_alpha, unshaded;

uniform sampler2D curve_frg_6 : repeat_disable;


// WorleyNoise3D
vec2 _cellular3dNoiseFunc(vec3 P, float _jitter_w3d) {
	float K = 0.142857142857;
	float Ko = 0.428571428571;
	float K2 = 0.020408163265306;
	float Kz = 0.166666666667;
	float Kzo = 0.416666666667;
	
	vec3 Pi = floor(P) - floor(floor(P) * (1.0 / 289.0)) * 289.0;
	vec3 Pf = fract(P) - 0.5;
	
	vec3 Pfx = Pf.x + vec3(1.0, 0.0, -1.0);
	vec3 Pfy = Pf.y + vec3(1.0, 0.0, -1.0);
	vec3 Pfz = Pf.z + vec3(1.0, 0.0, -1.0);
	
	vec3 p = ((34.0*(Pi.x+vec3(-1.0,0.0,1.0))+1.0)*(Pi.x+vec3(-1.0,0.0,1.0)))-floor(((34.0*(Pi.x+vec3(-1.0,0.0,1.0))+1.0)
				*(Pi.x+vec3(-1.0,0.0,1.0)))*(1.0/289.0))*289.0;
	vec3 p1 = ((34.0*(p+Pi.y-1.0)+1.0)*(p+Pi.y-1.0))-floor(((34.0*(p+Pi.y-1.0)+1.0)*(p+Pi.y-1.0))*(1.0/289.0))*289.0;
	vec3 p2 = ((34.0*(p+Pi.y)+1.0)*(p+Pi.y))-floor(((34.0*(p+Pi.y)+1.0)*(p+Pi.y))*(1.0/289.0))*289.0;
	vec3 p3 = ((34.0*(p+Pi.y+1.0)+1.0)*(p+Pi.y+1.0))-floor(((34.0*(p+Pi.y+1.0)+1.0)*(p+Pi.y+1.0))*(1.0/289.0))*289.0;
	
	vec3 p11 = ((34.0*(p1+Pi.z-1.0)+1.0)*(p1+Pi.z-1.0))-floor(((34.0*(p1+Pi.z-1.0)+1.0)*(p1+Pi.z-1.0))*(1.0/289.0))*289.0;
	vec3 p12 = ((34.0*(p1+Pi.z)+1.0)*(p1+Pi.z))-floor(((34.0*(p1+Pi.z)+1.0)*(p1+Pi.z))*(1.0/289.0))*289.0;
	vec3 p13 = ((34.0*(p1+Pi.z+1.0)+1.0)*(p1+Pi.z+1.0))-floor(((34.0*(p1+Pi.z+1.0)+1.0)*(p1+Pi.z+1.0))*(1.0/289.0))*289.0;
	
	vec3 p21 = ((34.0*(p2+Pi.z-1.0)+1.0)*(p2+Pi.z-1.0))-floor(((34.0*(p2+Pi.z-1.0)+1.0)*(p2+Pi.z-1.0))*(1.0/289.0))*289.0;
	vec3 p22 = ((34.0*(p2+Pi.z)+1.0)*(p2+Pi.z))-floor(((34.0*(p2+Pi.z)+1.0)*(p2+Pi.z))*(1.0/289.0))*289.0;
	vec3 p23 = ((34.0*(p2+Pi.z+1.0)+1.0)*(p2+Pi.z+1.0))-floor(((34.0*(p2+Pi.z+1.0)+1.0)*(p2+Pi.z+1.0))*(1.0/289.0))*289.0;
	
	vec3 p31 = ((34.0*(p3+Pi.z-1.0)+1.0)*(p3+Pi.z-1.0))-floor(((34.0*(p3+Pi.z-1.0)+1.0)*(p3+Pi.z-1.0))*(1.0/289.0))*289.0;
	vec3 p32 = ((34.0*(p3+Pi.z)+1.0)*(p3+Pi.z))-floor(((34.0*(p3+Pi.z)+1.0)*(p3+Pi.z))*(1.0/289.0))*289.0;
	vec3 p33 = ((34.0*(p3+Pi.z+1.0)+1.0)*(p3+Pi.z+1.0))-floor(((34.0*(p3+Pi.z+1.0)+1.0)*(p3+Pi.z+1.0))*(1.0/289.0))*289.0;
	
	vec3 ox11 = fract(p11*K) - Ko;
	vec3 oy11 = ((floor(p11*K))-floor((floor(p11*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz11 = floor(p11*K2)*Kz - Kzo;
	
	vec3 ox12 = fract(p12*K) - Ko;
	vec3 oy12 = ((floor(p12*K))-floor((floor(p12*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz12 = floor(p12*K2)*Kz - Kzo;
	
	vec3 ox13 = fract(p13*K) - Ko;
	vec3 oy13 = ((floor(p13*K))-floor((floor(p13*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz13 = floor(p13*K2)*Kz - Kzo;
	
	vec3 ox21 = fract(p21*K) - Ko;
	vec3 oy21 = ((floor(p21*K))-floor((floor(p21*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz21 = floor(p21*K2)*Kz - Kzo;
	
	vec3 ox22 = fract(p22*K) - Ko;
	vec3 oy22 = ((floor(p22*K))-floor((floor(p22*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz22 = floor(p22*K2)*Kz - Kzo;
	
	vec3 ox23 = fract(p23*K) - Ko;
	vec3 oy23 = ((floor(p23*K))-floor((floor(p23*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz23 = floor(p23*K2)*Kz - Kzo;
	
	vec3 ox31 = fract(p31*K) - Ko;
	vec3 oy31 = ((floor(p31*K))-floor((floor(p31*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz31 = floor(p31*K2)*Kz - Kzo;
	
	vec3 ox32 = fract(p32*K) - Ko;
	vec3 oy32 = ((floor(p32*K))-floor((floor(p32*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz32 = floor(p32*K2)*Kz - Kzo;
	
	vec3 ox33 = fract(p33*K) - Ko;
	vec3 oy33 = ((floor(p33*K))-floor((floor(p33*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz33 = floor(p33*K2)*Kz - Kzo;
	
	vec3 dx11 = Pfx + _jitter_w3d*ox11;
	vec3 dy11 = Pfy.x + _jitter_w3d*oy11;
	vec3 dz11 = Pfz.x + _jitter_w3d*oz11;
	
	vec3 dx12 = Pfx + _jitter_w3d*ox12;
	vec3 dy12 = Pfy.x + _jitter_w3d*oy12;
	vec3 dz12 = Pfz.y + _jitter_w3d*oz12;
	
	vec3 dx13 = Pfx + _jitter_w3d*ox13;
	vec3 dy13 = Pfy.x + _jitter_w3d*oy13;
	vec3 dz13 = Pfz.z + _jitter_w3d*oz13;
	
	vec3 dx21 = Pfx + _jitter_w3d*ox21;
	vec3 dy21 = Pfy.y + _jitter_w3d*oy21;
	vec3 dz21 = Pfz.x + _jitter_w3d*oz21;
	
	vec3 dx22 = Pfx + _jitter_w3d*ox22;
	vec3 dy22 = Pfy.y + _jitter_w3d*oy22;
	vec3 dz22 = Pfz.y + _jitter_w3d*oz22;
	
	vec3 dx23 = Pfx + _jitter_w3d*ox23;
	vec3 dy23 = Pfy.y + _jitter_w3d*oy23;
	vec3 dz23 = Pfz.z + _jitter_w3d*oz23;
	
	vec3 dx31 = Pfx + _jitter_w3d*ox31;
	vec3 dy31 = Pfy.z + _jitter_w3d*oy31;
	vec3 dz31 = Pfz.x + _jitter_w3d*oz31;
	
	vec3 dx32 = Pfx + _jitter_w3d*ox32;
	vec3 dy32 = Pfy.z + _jitter_w3d*oy32;
	vec3 dz32 = Pfz.y + _jitter_w3d*oz32;
	
	vec3 dx33 = Pfx + _jitter_w3d*ox33;
	vec3 dy33 = Pfy.z + _jitter_w3d*oy33;
	vec3 dz33 = Pfz.z + _jitter_w3d*oz33;
	
	vec3 d11 = dx11 * dx11 + dy11 * dy11 + dz11 * dz11;
	vec3 d12 = dx12 * dx12 + dy12 * dy12 + dz12 * dz12;
	vec3 d13 = dx13 * dx13 + dy13 * dy13 + dz13 * dz13;
	vec3 d21 = dx21 * dx21 + dy21 * dy21 + dz21 * dz21;
	vec3 d22 = dx22 * dx22 + dy22 * dy22 + dz22 * dz22;
	vec3 d23 = dx23 * dx23 + dy23 * dy23 + dz23 * dz23;
	vec3 d31 = dx31 * dx31 + dy31 * dy31 + dz31 * dz31;
	vec3 d32 = dx32 * dx32 + dy32 * dy32 + dz32 * dz32;
	vec3 d33 = dx33 * dx33 + dy33 * dy33 + dz33 * dz33;

	vec3 d1a = min(d11, d12);
	d12 = max(d11, d12);
	d11 = min(d1a, d13);
	d13 = max(d1a, d13);
	d12 = min(d12, d13);
	vec3 d2a = min(d21, d22);
	d22 = max(d21, d22);
	d21 = min(d2a, d23);
	d23 = max(d2a, d23);
	d22 = min(d22, d23);
	vec3 d3a = min(d31, d32);
	d32 = max(d31, d32);
	d31 = min(d3a, d33);
	d33 = max(d3a, d33);
	d32 = min(d32, d33);
	vec3 da = min(d11, d21);
	d21 = max(d11, d21);
	d11 = min(da, d31);
	d31 = max(da, d31);
	d11.xy = (d11.x < d11.y) ? d11.xy : d11.yx;
	d11.xz = (d11.x < d11.z) ? d11.xz : d11.zx;
	d12 = min(d12, d21);
	d12 = min(d12, d22);
	d12 = min(d12, d31);
	d12 = min(d12, d32);
	d11.yz = min(d11.yz,d12.xy);
	d11.y = min(d11.y,d12.z);
	d11.y = min(d11.y,d11.z);
	return sqrt(d11.xy);
}
// TransformUV
vec2 _transformUV(vec2 _uv_transform, vec2 _scale_uv_, vec2 _pivot_scale_uv_, vec2 _offset_uv_, float _rotate_uv, vec2 _pivot_rotate_uv_){
	_uv_transform -= _offset_uv_; // offset
	_uv_transform = (_uv_transform - _pivot_scale_uv_) * _scale_uv_ + _pivot_scale_uv_; // zoom
	vec2 _rot_uv_angl = vec2(cos(_rotate_uv), sin(_rotate_uv));
	mat2 _rot_matrix = mat2(vec2(_rot_uv_angl.x, - _rot_uv_angl.y), vec2(_rot_uv_angl.y, _rot_uv_angl.x));
	_uv_transform = (_uv_transform - _pivot_rotate_uv_) * _rot_matrix + _pivot_rotate_uv_; // rotate
	return _uv_transform;
}

void vertex() {
	mat4 n_out2p0;
// GetBillboardMatrix:2
	{
		mat4 __wm = mat4(normalize(INV_VIEW_MATRIX[0]), normalize(INV_VIEW_MATRIX[1]), normalize(INV_VIEW_MATRIX[2]), MODEL_MATRIX[3]);
		__wm = __wm * mat4(vec4(cos(INSTANCE_CUSTOM.x), -sin(INSTANCE_CUSTOM.x), 0.0, 0.0), vec4(sin(INSTANCE_CUSTOM.x), cos(INSTANCE_CUSTOM.x), 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0));
		__wm = __wm * mat4(vec4(length(MODEL_MATRIX[0].xyz), 0.0, 0.0, 0.0), vec4(0.0, length(MODEL_MATRIX[1].xyz), 0.0, 0.0), vec4(0.0, 0.0, length(MODEL_MATRIX[2].xyz), 0.0), vec4(0.0, 0.0, 0.0, 1.0));
		n_out2p0 = VIEW_MATRIX * __wm;
	}


// Output:0
	MODELVIEW_MATRIX = n_out2p0;


}

void fragment() {
// Input:2
	vec4 n_out2p0 = COLOR;
	float n_out2p4 = n_out2p0.a;


	float n_out10p0;
// ScaledTIME:10
	float n_in10p0 = 3.00000;
	{
		n_out10p0 = n_in10p0 * TIME;
	}


	float n_out9p0;
	float n_out9p1;
// WorleyNoise3D:9
	vec3 n_in9p1 = vec3(0.00000, 0.00000, 0.00000);
	float n_in9p2 = 4.00000;
	float n_in9p3 = 1.00000;
	{
		vec2 n_out9p0n_out9p1 = _cellular3dNoiseFunc(vec3((UV.xy+n_in9p1.xy)*n_in9p2, n_out10p0), min(max(n_in9p3, 0.0), 1.0));
		n_out9p0 = n_out9p0n_out9p1.x;
		n_out9p1 = n_out9p0n_out9p1.y;
	}


	vec3 n_out4p0;
// TransformUV:4
	vec3 n_in4p1 = vec3(0.50000, 0.50000, 0.00000);
	vec3 n_in4p2 = vec3(1.00000, 1.00000, 0.00000);
	vec3 n_in4p3 = vec3(0.50000, 0.50000, 0.00000);
	float n_in4p4 = 0.00000;
	vec3 n_in4p5 = vec3(0.50000, 0.50000, 0.00000);
	{
		n_out4p0.xy = _transformUV(UV.xy, n_in4p2.xy, n_in4p3.xy, n_in4p1.xy, n_in4p4, n_in4p5.xy);
	}


// Distance:5
	vec2 n_in5p1 = vec2(0.00000, 0.00000);
	float n_out5p0 = distance(vec2(n_out4p0.xy), n_in5p1);


// CurveTexture:6
	float n_out6p0 = texture(curve_frg_6, vec2(n_out5p0)).r;


// FloatOp:8
	float n_out8p0 = n_out9p0 * n_out6p0;


// FloatOp:7
	float n_out7p0 = n_out2p4 * n_out8p0;


// Output:0
	ALBEDO = vec3(n_out2p0.xyz);
	ALPHA = n_out7p0;


}
"
graph_offset = Vector2(-551.681, 233.551)
flags/depth_prepass_alpha = true
flags/unshaded = true
nodes/vertex/2/node = SubResource("VisualShaderNodeBillboard_11aq1")
nodes/vertex/2/position = Vector2(-200, 240)
nodes/vertex/connections = PackedInt32Array(2, 0, 0, 10)
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_y2n0c")
nodes/fragment/2/position = Vector2(-100, -20)
nodes/fragment/3/node = SubResource("VisualShaderNodeInput_acbhm")
nodes/fragment/3/position = Vector2(-920, 120)
nodes/fragment/4/node = SubResource("VisualShaderNodeCustom_knl50")
nodes/fragment/4/position = Vector2(-620, 160)
nodes/fragment/5/node = SubResource("VisualShaderNodeVectorDistance_h8cyq")
nodes/fragment/5/position = Vector2(-380, 220)
nodes/fragment/6/node = SubResource("VisualShaderNodeCurveTexture_2h6s6")
nodes/fragment/6/position = Vector2(-400, 660)
nodes/fragment/7/node = SubResource("VisualShaderNodeFloatOp_8kpy8")
nodes/fragment/7/position = Vector2(240, 240)
nodes/fragment/8/node = SubResource("VisualShaderNodeFloatOp_hpnsg")
nodes/fragment/8/position = Vector2(40, 460)
nodes/fragment/9/node = SubResource("VisualShaderNodeCustom_52ukr")
nodes/fragment/9/position = Vector2(-60, 220)
nodes/fragment/10/node = SubResource("VisualShaderNodeCustom_c6akn")
nodes/fragment/10/position = Vector2(-320, 120)
nodes/fragment/connections = PackedInt32Array(4, 0, 5, 0, 2, 0, 0, 0, 7, 0, 0, 1, 2, 4, 7, 0, 5, 0, 6, 0, 6, 0, 8, 1, 8, 0, 7, 1, 9, 0, 8, 0, 10, 0, 9, 4)
